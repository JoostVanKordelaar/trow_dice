barplot(rbinom(10,1,0.97))
barplot(rbinom(10,1,0.97))
barplot(rbinom(10,1,0.97))
barplot(rbinom(10,1,0.97))
barplot(rbinom(10,1,0.97))
barplot(rbinom(10,1,0.97))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(table(rbinom(10,1,0.97)))
barplot(dbinom(0:10,10,0.97))
barplot(dbinom(0:10,10,0.97),freqs=FALSE)
barplot(dbinom(0:10,10,0.97))
barplot(dbinom(0:10,10,0.97))
?det
exp(-4.5-6+30)
-4.5-6+30
294267566+1
log(1/294267567/(1-1/294267567))
log((1/294267567)/(1-1/294267567))
(log(1/294267567)/log(1-1/294267567))
log(0.75/0.25)
(log(0.75)/log(0.25))
log(1/294267567/(1-1/294267567))
rep(c(1:5),10)
matrix(rep(c(1:5),10),ncol=5)
matrix(rep(c(1:5),10),ncol=5,byrow = TRUE)
myMatrix <- matrix(rep(c(1:5),10),ncol=5,byrow = TRUE)
print(myMatrix)
myMatrix2 <- matrix(rep(c(1:10),5),ncol=5,byrow = FALSE)
print(myMatrix2)
#2a
myMatrix <- matrix(rep(c(1:5),10),ncol=5,byrow = TRUE)
print(myMatrix)
#2b
myMatrix2 <- matrix(rep(c(1:10),5),ncol=5,byrow = FALSE)
myMatrix3 <- myMatrix*myMatrix2
print(myMatrix3)
x <- matrix(
1:2,
nrow = 5,
ncol = 2
)
x
#2a
myMatrix <- matrix(c(1:5),ncol=5,byrow = TRUE)
print(myMatrix)
#2b
myMatrix2 <- matrix(c(1:10),ncol=5,byrow = FALSE)
myMatrix3 <- myMatrix*myMatrix2
#2a
myMatrix <- matrix(c(1:5),ncol=5,nrow=5,byrow = TRUE)
print(myMatrix)
#2a
myMatrix <- matrix(c(1:5),ncol=5,nrow=10,byrow = TRUE)
print(myMatrix)
#2a
myMatrix <- matrix(c(1:5),ncol=5,nrow=10,byrow = TRUE)
print(myMatrix)
#2b
myMatrix2 <- matrix(c(1:10),ncol=5,nrow=10,byrow = FALSE)
myMatrix3 <- myMatrix*myMatrix2
print(myMatrix3)
rm(list = ls())
x <- matrix(
1:2,
nrow = 5,
ncol = 2
)
x
#2a
myMatrix <- matrix(c(1:5),ncol=5,nrow=10,byrow = TRUE)
print(myMatrix)
#2b
myMatrix2 <- matrix(c(1:10),ncol=5,nrow=10,byrow = FALSE)
myMatrix3 <- myMatrix*myMatrix2
print(myMatrix3)
#2c
x <- matrix(
1:2,
nrow = 5,
ncol = 2
)
y = <- matrix(
#2a
myMatrix <- matrix(c(1:5),ncol=5,nrow=10,byrow = TRUE)
print(myMatrix)
#2b
myMatrix2 <- matrix(c(1:10),ncol=5,nrow=10,byrow = FALSE)
myMatrix3 <- myMatrix*myMatrix2
print(myMatrix3)
#2c
x <- matrix(
1:2,
nrow = 5,
ncol = 2
)
y <- matrix(
1:3,
nrow = 5,
ncol = 2
)
#2a
myMatrix <- matrix(c(1:5),ncol=5,nrow=10,byrow = TRUE)
print(myMatrix)
#2b
myMatrix2 <- matrix(c(1:10),ncol=5,nrow=10,byrow = FALSE)
myMatrix3 <- myMatrix*myMatrix2
print(myMatrix3)
#2c
x <- matrix(
1:2,
nrow = 5,
ncol = 2
)
y <- matrix(
1:3,
nrow = 5,
ncol = 2
)
z <- x+y
print(z)
set.seed(1)
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
print(meanSample)
goalAchieved <- meanSample > 0.5
print(goalAchieved)
}
set.seed(1)
numIterations <- 20
meanSample <- numeric(numIterations)
for (iteration in 1:numIterations){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample[iteration] <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
}
set.seed(1)
numIterations <- 20
meanSample <- numeric(numIterations)
for (iteration in 1:numIterations){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample[iteration] <- mean(mySample)
goalAchieved <- meanSample[iteration] > 0.5
}
}
?sapply
#implicit loop
samplingHigh <- function(){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
return(meanSample)
}
sapply(1:20,samplingHigh)
#implicit loop
samplingHigh <- function(){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
return(meanSample)
}
replicate(20,samplingHigh)
?apply
samplingHigh <- function(){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
return(meanSample)
}
apply(X=1:20,FUN=samplingHigh)
samplingHigh <- {
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
return(meanSample)
}
#implicit loop
samplingHigh <- function(){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
return(meanSample)
}
replicate(20,samplingHigh)
replicate(5, 1 + 1)
replicate(5, rnorm(1, 0, 1))
replicate(20,samplingHigh())
set.seed(1)
numIterations <- 20
meanSample <- numeric(numIterations)
for (iteration in 1:numIterations){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample[iteration] <- mean(mySample)
goalAchieved <- meanSample[iteration] > 0.5
}
}
samplingHigh <- function(){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
return(meanSample)
}
set.seed(1)
replicate(20,samplingHigh())
set.seed(1)
numIterations <- 20
meanSample <- numeric(numIterations)
for (iteration in 1:numIterations){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample[iteration] <- mean(mySample)
goalAchieved <- meanSample[iteration] > 0.5
}
}
print(meanSample)
#implicit loop
samplingHigh <- function(){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
return(meanSample)
}
set.seed(1)
meanSample <- replicate(20,samplingHigh())
print(meanSample)
myVector <- c(TRUE,TRUE,TRUE)
which(myVector)
bla <- c(1,2,3)
which(bla)
advancedSum <- function(myVector){
if (is.logical(myVector)){
if (which(myVector)==length(myVector)){
answer <- TRUE
} else {
answer <- FALSE
}
} else {
answer <- mean(myVector)
}
}
# checks
advancedSum(c(TRUE,TRUE,TRUE))
myVector
which(myVector)==length(myVector)
which(myVector)
sum(myVector)
advancedSum <- function(myVector){
if (is.logical(myVector)){
if (sum(myVector)==length(myVector)){
answer <- TRUE
} else {
answer <- FALSE
}
} else {
answer <- mean(myVector)
}
}
# checks
advancedSum(c(TRUE,TRUE,TRUE))
advancedSum(c(TRUE,TRUE,TRUE))
output <- advancedSum(c(TRUE,TRUE,TRUE))
output
output <- advancedSum(c(TRUE,FALSE,TRUE))
output
output <- advancedSum(c(TRUE,TRUE,TRUE))
output
output <- advancedSum(c(TRUE,FALSE,TRUE))
output
output <- advancedSum(c(6,7,8))
output
#4b
advancedSum <- function(myVector){
if (is.character(myVector)){
if (is.logical(myVector)){
stop("Please insert a Boolean vector or a numerical vector. The execution has stopped")
}
if (sum(myVector)==length(myVector)){
answer <- TRUE
} else {
answer <- FALSE
}
} else {
answer <- mean(myVector)
}
}
# checks
output <- advancedSum(c("jaja","neenee"))
myVector <- c("jaja","nee")
is.logical(myVector)
#2a
myMatrix <- matrix(c(1:5),ncol=5,nrow=10,byrow = TRUE)
print(myMatrix)
#2b
myMatrix2 <- matrix(c(1:10),ncol=5,nrow=10,byrow = FALSE)
myMatrix3 <- myMatrix*myMatrix2
print(myMatrix3)
#2c
x <- matrix(
1:2,
nrow = 5,
ncol = 2
)
y <- matrix(
1:3,
nrow = 5,
ncol = 2
)
z <- x+y
print(z)
#3a
set.seed(1)
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
#3b
# explicit loop
set.seed(1)
numIterations <- 20
meanSample <- numeric(numIterations)
for (iteration in 1:numIterations){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample[iteration] <- mean(mySample)
goalAchieved <- meanSample[iteration] > 0.5
}
}
print(meanSample)
#implicit loop
samplingHigh <- function(){
goalAchieved <- FALSE
while (!goalAchieved){
mySample <- runif(10,-1,1)
meanSample <- mean(mySample)
goalAchieved <- meanSample > 0.5
}
return(meanSample)
}
set.seed(1)
meanSample <- replicate(20,samplingHigh())
print(meanSample)
#4a
advancedSum <- function(myVector){
if (is.logical(myVector)){
if (sum(myVector)==length(myVector)){
answer <- TRUE
} else {
answer <- FALSE
}
} else {
answer <- mean(myVector)
}
}
# checks
output <- advancedSum(c(TRUE,TRUE,TRUE))
output
output <- advancedSum(c(TRUE,FALSE,TRUE))
output
output <- advancedSum(c(6,7,8))
output
#4b
advancedSum <- function(myVector){
if (is.character(myVector)){
stop("Please insert a Boolean vector or a numerical vector. The execution has stopped")
}
if (is.logical(myVector)){
if (sum(myVector)==length(myVector)){
answer <- TRUE
} else {
answer <- FALSE
}
} else {
answer <- mean(myVector)
}
}
# checks
output <- advancedSum(c("jaja","neenee"))
advancedSum <- function(myVector){
if (is.character(myVector)){
stop("Please insert a Boolean vector or a numerical vector. The execution has stopped")
}
if (is.logical(myVector)){
if (sum(myVector)==length(myVector)){
answer <- TRUE
} else {
answer <- FALSE
}
} else {
answer <- mean(myVector)
}
}
# checks
output <- advancedSum(c("jaja","neenee"))
output <- advancedSum(c(TRUE,TRUE,TRUE))
output
output <- advancedSum(c(TRUE,FALSE,TRUE))
output
output <- advancedSum(c(6,7,8))
output
advancedSum <- function(myVector){
if (is.character(myVector)){
warning("Please insert a Boolean vector or a numerical vector. The execution has stopped")
}
if (is.logical(myVector)){
if (sum(myVector)==length(myVector)){
answer <- TRUE
} else {
answer <- FALSE
}
} else {
answer <- mean(myVector)
}
}
# checks
output <- advancedSum(c("jaja","neenee"))
output
set.seed(1)
x <- rnorm(50)
data <- data.frame(
x = x,
y = 2 * x + rnorm(50)
)
plot(x,y)
set.seed(1)
x <- rnorm(50)
data <- data.frame(
x = x,
y = 2 * x + rnorm(50)
)
plot(data$x,data$y)
plot(data$x,data$y,bty = "n")
plot(data$x,data$y,bty = "n",pch = 2)
plot(data$x,data$y,bty = "n",pch = 2,ylab = "Dependent variable",xlab = "Independent variable")
roxygen2::roxygenize
install.packages("roxygen2")
roxygen2::roxygenize
roxygen2::roxygenize
roxygen2::roxygenize
roxygenize
library(roxygen2)
library(roxygen2)
roxygenize
?roxygenize
roxygenize
roxygenize
?trowdice
?throw
throw()
?throw
roxygenize
roxygenize
?throw
roxygenize
?throw
roxygenize()
?throw
roxygenize()
roxygen2::roxygenise()
?throw
throw()
throw()
throw()
throw()
library(throwdice)
detach("package:throwdice", unload = TRUE)
throw()
